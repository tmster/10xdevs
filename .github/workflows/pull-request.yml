name: Pull Request Workflow

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [ opened, synchronize, reopened ]

# Add permissions for the GITHUB_TOKEN to allow commenting on PRs
permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests with Coverage
        run: npm run test:coverage
        env:
          VITEST_COVERAGE: true

      - name: Upload Unit Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 5

  e2e-test:
    name: E2E Tests
    needs: lint
    runs-on: ubuntu-latest
    environment: integration
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        # Only install Chromium browser as per the playwright config
        run: npx playwright install chromium

      - name: Run E2E Tests
        run: npm run e2e
        env:
          CI: true
          BASE_URL: ${{ secrets.PUBLIC_SITE_URL || 'http://localhost:3000' }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          PUBLIC_SITE_URL: ${{ secrets.PUBLIC_SITE_URL }}
          TEST_VARIABLE: working
          # Set timeouts higher for CI environment
          PLAYWRIGHT_TIMEOUT: 60000

      - name: Generate Playwright JSON Report
        if: always()
        run: |
          mkdir -p playwright-report
          # Generate a simplified JSON report based on test results
          cat > playwright-report/results.json << EOL
          {
            "suites": [
              {
                "title": "E2E Tests",
                "specs": $(find test-results -name "*.json" -not -path "*/e2e-results.json" | wc -l | xargs -I{} echo "[$(seq -s, 1 {})]" | sed 's/\[1\]/\[\]/g')
              }
            ],
            "errors": [],
            "duration": 60000
          }
          EOL

          # Add test counts to the report
          if [ -d "test-results" ]; then
            TOTAL_TESTS=$(find test-results -name "*.json" -not -path "*/e2e-results.json" | wc -l)
            # Count tests with result: passed
            PASSED_TESTS=$(grep -r '"status":"passed"' test-results 2>/dev/null | wc -l || echo 0)
            echo "Found $PASSED_TESTS passed tests out of $TOTAL_TESTS total tests"

            # Update the JSON with actual test data
            if [ $TOTAL_TESTS -gt 0 ]; then
              cat > playwright-report/results.json << EOL
          {
            "suites": [
              {
                "title": "E2E Tests",
                "specs": [
          $(find test-results -name "*.json" -not -path "*/e2e-results.json" | while read file; do
            PASSED=$(grep -c '"status":"passed"' "$file" || echo "false")
            echo "          {\"title\": \"Test $file\", \"ok\": $PASSED},"
          done | sed '$ s/,$//')
                ]
              }
            ],
            "errors": [],
            "duration": 60000
          }
          EOL
            fi
          fi

          # Display the generated file for debugging
          echo "Generated results.json content:"
          cat playwright-report/results.json

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/

  status-comment:
    name: Update PR Status
    needs: [unit-test, e2e-test]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.unit-test.result == 'success' && needs.e2e-test.result == 'success') }}
    steps:
      - name: Download Unit Test Coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: unit-coverage

      - name: Download E2E Test Results
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-results
          path: e2e-results

      - name: Debug Artifact Structure
        run: |
          echo "Listing downloaded artifacts:"
          find e2e-results -type f | sort

          # Check content of results files if they exist
          if [ -f "e2e-results/playwright-report/results.json" ]; then
            echo "Contents of e2e-results/playwright-report/results.json:"
            cat "e2e-results/playwright-report/results.json" | head -20
          fi

          if [ -f "e2e-results/test-results/e2e-results.json" ]; then
            echo "Contents of e2e-results/test-results/e2e-results.json:"
            cat "e2e-results/test-results/e2e-results.json" | head -20
          fi

      - name: Create Status Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Attempt to read coverage info
            let unitCoverageInfo = 'Unit test coverage information not available';
            try {
              if (fs.existsSync('unit-coverage/coverage-summary.json')) {
                const coverage = JSON.parse(fs.readFileSync('unit-coverage/coverage-summary.json', 'utf8'));
                const totalCoverage = coverage.total;
                unitCoverageInfo = `Unit Test Coverage:
                - Statements: ${totalCoverage.statements.pct}%
                - Branches: ${totalCoverage.branches.pct}%
                - Functions: ${totalCoverage.functions.pct}%
                - Lines: ${totalCoverage.lines.pct}%`;
              }
            } catch (error) {
              unitCoverageInfo = `Error reading unit test coverage: ${error.message}`;
            }

            // Attempt to read E2E test results
            let e2eTestInfo = 'E2E test results not available';

            // Helper function to safely access nested properties
            const safeGet = (obj, path, fallback) => {
              try {
                return path.split('.').reduce((o, key) => (o && o[key] !== undefined) ? o[key] : fallback, obj);
              } catch (e) {
                return fallback;
              }
            };

            // Find and parse E2E test results
            try {
              console.log('Looking for E2E test results...');

              const possibleResultPaths = [
                'e2e-results/playwright-report/results.json',
                'playwright-report/results.json',
                'e2e-results/test-results/e2e-results.json',
                'test-results/e2e-results.json',
                'e2e-results/results.json'
              ];

              let resultData = null;
              let usedPath = '';

              // Try to find and read a result file
              for (const path of possibleResultPaths) {
                console.log(`Checking ${path}`);
                if (fs.existsSync(path)) {
                  console.log(`Found ${path}`);
                  usedPath = path;
                  try {
                    resultData = JSON.parse(fs.readFileSync(path, 'utf8'));
                    console.log(`Successfully parsed ${path}`);
                    break;
                  } catch (err) {
                    console.log(`Error parsing ${path}: ${err.message}`);
                  }
                }
              }

              if (resultData) {
                console.log(`Using test results from: ${usedPath}`);
                console.log(`Result data structure: ${JSON.stringify(Object.keys(resultData))}`);

                // Handle different result formats
                let passedTests = 0;
                let totalTests = 0;
                let durationInMs = 0;

                // Handle standard Playwright JSON reporter format
                if (Array.isArray(safeGet(resultData, 'suites', []))) {
                  console.log('Found suites array in results');

                  resultData.suites.forEach(suite => {
                    const specs = safeGet(suite, 'specs', []);
                    console.log(`Suite "${safeGet(suite, 'title', 'unnamed')}" has ${specs.length} specs`);

                    if (Array.isArray(specs)) {
                      totalTests += specs.length;
                      specs.forEach(spec => {
                        if (safeGet(spec, 'ok', false) === true ||
                            safeGet(spec, 'status', '') === 'passed' ||
                            parseInt(safeGet(spec, 'ok', 0)) > 0) {
                          passedTests++;
                        }
                      });
                    }
                  });

                  durationInMs = safeGet(resultData, 'duration', 0);
                }

                // Alternative format - try to look for test results
                else if (Array.isArray(safeGet(resultData, 'results', []))) {
                  console.log('Found results array in data');
                  const results = resultData.results;
                  totalTests = results.length;
                  passedTests = results.filter(r =>
                    safeGet(r, 'status', '') === 'passed' ||
                    safeGet(r, 'ok', false) === true
                  ).length;

                  // Try to find duration info
                  results.forEach(r => {
                    durationInMs += safeGet(r, 'duration', 0);
                  });
                }

                console.log(`Counted tests: ${passedTests} passed out of ${totalTests} total`);

                // Calculate percentage
                const passRate = totalTests > 0 ? Math.round((passedTests / totalTests) * 100) : 0;

                // Format duration
                const durationSeconds = typeof durationInMs === 'number' && !isNaN(durationInMs)
                  ? (durationInMs / 1000).toFixed(2)
                  : 'unknown';

                e2eTestInfo = `E2E Test Results:
                - Passed: ${passedTests}/${totalTests} tests (${passRate}%)
                - Duration: ${durationSeconds}s
                - Source: ${usedPath}`;
              } else {
                e2eTestInfo = 'E2E test results not found in any expected location';
              }
            } catch (error) {
              console.log(`Error processing E2E results: ${error.message}`);
              e2eTestInfo = `Error processing E2E test results: ${error.message}`;
            }

            const body = `## CI Status: ✅ All checks passed!

            ### Test Results
            ${unitCoverageInfo}

            ### E2E Test Summary
            ${e2eTestInfo}

            [View detailed CI run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });