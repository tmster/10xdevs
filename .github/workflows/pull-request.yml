name: Pull Request Workflow

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests with Coverage
        run: npm run test:coverage
        env:
          VITEST_COVERAGE: true

      - name: Upload Unit Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 5

  e2e-test:
    name: E2E Tests
    needs: lint
    runs-on: ubuntu-latest
    environment: integration
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        # Only install Chromium browser as per the playwright config
        run: npx playwright install chromium

      - name: Set up environment
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          PUBLIC_SITE_URL: ${{ secrets.PUBLIC_SITE_URL }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          BASE_URL: ${{ secrets.PUBLIC_SITE_URL || 'http://localhost:3000' }}
        run: |
          echo "Setting up environment variables for E2E tests"
          cp .env.example .env.test
          sed -i "s|your-supabase-url|$SUPABASE_URL|g" .env.test
          sed -i "s|your-supabase-anon-key|$SUPABASE_KEY|g" .env.test
          sed -i "s|your-openrouter-api-key|$OPENROUTER_API_KEY|g" .env.test
          sed -i "s|test@example.com|$E2E_USERNAME|g" .env.test
          sed -i "s|password123|$E2E_PASSWORD|g" .env.test
          sed -i "s|http://localhost:4321|$BASE_URL|g" .env.test
          echo "BASE_URL=$BASE_URL" >> .env.test
          echo "CI=true" >> .env.test

      - name: Run E2E Tests
        run: npm run e2e
        env:
          CI: true
          BASE_URL: ${{ secrets.PUBLIC_SITE_URL || 'http://localhost:3000' }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          # Set timeouts higher for CI environment
          PLAYWRIGHT_TIMEOUT: 60000

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/

  status-comment:
    name: Update PR Status
    needs: [unit-test, e2e-test]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.unit-test.result == 'success' && needs.e2e-test.result == 'success') }}
    steps:
      - name: Download Unit Test Coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: unit-coverage

      - name: Download E2E Test Results
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-results
          path: e2e-results

      - name: Create Status Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Attempt to read coverage info
            let unitCoverageInfo = 'Unit test coverage information not available';
            try {
              if (fs.existsSync('unit-coverage/coverage-summary.json')) {
                const coverage = JSON.parse(fs.readFileSync('unit-coverage/coverage-summary.json', 'utf8'));
                const totalCoverage = coverage.total;
                unitCoverageInfo = `Unit Test Coverage:
                - Statements: ${totalCoverage.statements.pct}%
                - Branches: ${totalCoverage.branches.pct}%
                - Functions: ${totalCoverage.functions.pct}%
                - Lines: ${totalCoverage.lines.pct}%`;
              }
            } catch (error) {
              unitCoverageInfo = `Error reading unit test coverage: ${error.message}`;
            }

            // Attempt to read E2E test results
            let e2eTestInfo = 'E2E test results not available';
            try {
              if (fs.existsSync('e2e-results/test-results/e2e-results.json')) {
                const e2eResults = JSON.parse(fs.readFileSync('e2e-results/test-results/e2e-results.json', 'utf8'));
                const passedTests = e2eResults.suites.reduce((acc, suite) => acc + suite.specs.filter(spec => spec.ok).length, 0);
                const totalTests = e2eResults.suites.reduce((acc, suite) => acc + suite.specs.length, 0);

                e2eTestInfo = `E2E Test Results:
                - Passed: ${passedTests}/${totalTests} tests (${Math.round(passedTests/totalTests*100)}%)
                - Duration: ${(e2eResults.duration/1000).toFixed(2)}s`;
              }
            } catch (error) {
              e2eTestInfo = `Error reading E2E test results: ${error.message}`;
            }

            const body = `## CI Status: âœ… All checks passed!

            ### Test Results
            ${unitCoverageInfo}

            ### E2E Test Summary
            ${e2eTestInfo}

            [View detailed CI run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });